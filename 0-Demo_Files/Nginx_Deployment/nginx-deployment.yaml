---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  namespace: nginx-demo
  name: nginx-sc
  annotations:
    storageclass.beta.kubernetes.io/is-default-class: "true"
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
provisioner: k8s.io/minikube-hostpath
---
apiVersion: v1
kind: PersistentVolume
metadata:
  annotations:
    pv.kubernetes.io/provisioned-by: k8s.io/minikube-hostpath
  finalizers:
  - kubernetes.io/pv-protection
  name: nginx-pv
spec:
  accessModes:
  - ReadWriteMany
  capacity:
    storage: 1Gi
  claimRef:
    apiVersion: v1
    kind: PersistentVolumeClaim
    name: nginx-pvc
    namespace: nginx-demo
  hostPath:
    path: /tmp/hostpath-provisioner/nginx-demo/nginx-pvc
  persistentVolumeReclaimPolicy: Delete
  storageClassName: standard
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nginx-pvc
  namespace: nginx-demo
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deploy
  namespace: nginx-demo
  labels:
    app: web
spec:
  selector:
    matchLabels:
      app: web
  replicas: 5
  template:
    metadata:
      labels:
        app: web
      volumes:
        - name: www
          PersistentVolumeClaim:
            claimName: nginx-pvc
---
apiVersion: v1
kind: Pod
metadata:
  name: nginx-deploy
  namespace: nginx-demo
  labels:
    name: web
spec:
  containers:
  - name: web
    image: nginx:latest
    volumeMounts:
    - mountPath: "/var/log/nginx"
      name: www
    resources:
      limits:
        memory: "128Mi"
        cpu: "500m"
    ports:
      - containerPort: 8080
  volumes:
    - name: www
      apiVersion: v1
      PersistentVolumeClaim:
        claimName: nginx-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: nginx-demo
spec:
  selector:
    app: web
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
